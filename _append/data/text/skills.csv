Name,Description,Script
mqcursedbite,Internal script for Cursed Bite status effect,var robotSkillcard = null; if (target.getvar(~mqcursedbite_old_equipment~).length == null) {var oldEquipment = []; if (target.equipment.length > 0) for (eq in target.equipment) {oldEquipment.push(eq); if (eq.skillcard.indexOf(~robot_~) != -1) robotSkillcard = eq;} target.setvar(~mqcursedbite_old_equipment~[;] oldEquipment); target.setvar(~mqcursedbite_old_layout~[;] target.layout);} target.layout = target.layout.EQUIPMENT; target.equipment = []; if (robotSkillcard != null) target.equipment.push(robotSkillcard); if (self.equipment.length > 0) for (eq in self.equipment) if (eq.skillcard == ~~ && target.spaceleft() >= eq.size && !eq.temporary_thisturnonly) giveenemyequipment(eq.name + eq.namemodifier[;] false[;] false); if (target.scriptendturn.indexOf(~/*mqcursedbite_script_injected*/~) == -1) {var scriptRevertEquipment = ~/*mqcursedbite_script_injected*/ if (self.getvar(\~mqcursedbite_old_equipment\~).length != null) {self.equipment = self.getvar(\~mqcursedbite_old_equipment\~); self.setvar(\~mqcursedbite_old_equipment\~[;] 0); self.layout = self.getvar(\~mqcursedbite_old_layout\~); self.setvar(\~mqcursedbite_old_layout\~[;] 0);} removestatusself(\~mqcursedbite\~);~; target.scriptendturn += ~ ~ + scriptRevertEquipment; target.scriptaftercombat += ~ ~ + scriptRevertEquipment;}
Sharpening,Increase damage by 3 this fight,sfx(~_metals~); inflictself(~mqsharpening~[;] 3);
mqtimerfix,Internal script for timer equipment,for (eq in self.equipment) if (eq.scriptonanyequipmentuse != null && eq.scriptonanyequipmentuse != ~~ && eq.scriptonanyequipmentuse.indexOf(~mqtimer_equipment_use_check~) == -1) {eq.scriptonanyequipmentuse = ~if (e.getvar(\~mqtimer_equipment_use_check\~) < self.equipmentused) {~ + eq.scriptonanyequipmentuse + ~} e.setvar(\~mqtimer_equipment_use_check\~[;] self.equipmentused);~;}
mqheliuminit,Internal script for Helium equipment,if (getstatusself(~mqhelium~) <= 0) {inflictself(~mqhelium~); sfx(~helium_fly~); if (self.equipment.length > 0) for (eq in self.equipment) eq.setvar(~mqhelium_speed~[;] 0); var actHelium = new motion.actuators.SimpleActuator(null[;] 0[;] null); actHelium.repeat(-1); var funcHelium = new hscript.Parser().parseString(~if (getstatusself(\~mqhelium\~) <= 0 # self.hp <= 0 # target.hp <= 0) actHelium._repeat = 0; if (self.equipment.length > 0) for (eq in self.equipment) if (eq.ready && eq.skillcard == \~\~ && (eq.getvar(\~mqhelium_affected\~) == 1 # eq.script.indexOf(\~/*mqhelium\~) != -1)) {var tags = eq.script.substr(eq.script.indexOf(\~/*mqhelium\~) + 10[;] eq.script.substr(eq.script.indexOf(\~/*mqhelium\~) + 10).indexOf(\~*/\~)).split(\~:\~); var helium_multiplier = 1 + (tags.indexOf(\~double\~) != -1 ? 0.5 : 0) - (tags.indexOf(\~half\~) != -1 ? 0.5 : 0) - getstatusself(\~mqheliumreduction\~) / 100; if (helium_multiplier < 0) helium_multiplier = 0; eq.y = eq.y - eq.getvar(\~mqhelium_speed\~) * helium_multiplier; eq.setvar(\~mqhelium_speed\~[;] eq.getvar(\~mqhelium_speed\~) + 1); if (eq.y <= -eq.height / 3 * 2) {sfx(\~helium_pop\~); eq.animate(\~curse\~); eq.ready = false; eq.animation[0].parameter[2] = \~[star] Pop!\~; eq.animation[0].command[5] = \~\~;}}~); var interp = new hscript.Interp(); interp.variables.set(~self~[;] self); interp.variables.set(~target~[;] target); interp.variables.set(~getstatusself~[;] getstatusself); interp.variables.set(~sfx~[;] sfx); interp.variables.set(~actHelium~[;] actHelium); interp.variables.set(~trace~[;] trace); actHelium.onRepeat(interp.execute[;] [funcHelium]); actHelium.move();}
mqgetequipment,Internal script. Sets the user's mqallequipment to a list of all non-special equipment,self.setvar(~mqallequipment~[;] getequipment());
mqrepeatingjinx,Internal script that inflicts a jinx that repeats itself every few turns,var i = self.getvar(~mqrepeatingjinx_current_index~); var execscr = ~ self.setvar(\~mqrepeatingjinx_current_index\~[;] ~ + i + ~); new elements.Skill(\~mqrepeatingjinx\~).execute(self.getvar(\~mqrepeatingjinx_self_\~ + ~ + i + ~)[;] self.getvar(\~mqrepeatingjinx_target_\~ + ~ + i + ~));~; if (target != self.getvar(~mqrepeatingjinx_target_~ + i)) execscr = ~ target.setvar(\~mqrepeatingjinx_current_index\~[;] ~ + i + ~); new elements.Skill(\~mqrepeatingjinx\~).execute(target.getvar(\~mqrepeatingjinx_target_\~ + ~ + i + ~)[;] target.getvar(\~mqrepeatingjinx_self_\~ + ~ + i + ~));~; jinx(self.getvar(~mqrepeatingjinx_title_~ + i)[;] self.getvar(~mqrepeatingjinx_details_status_~ + i) + ~[;] then do it again in ~ + self.getvar(~mqrepeatingjinx_turns_~ + i) + ~ turn~ + (self.getvar(~mqrepeatingjinx_turns_~ + i) > 1 ? ~s~ : ~~)[;] self.getvar(~mqrepeatingjinx_details_~ + i)[;] self.getvar(~mqrepeatingjinx_script_~ + i) + execscr[;] self.getvar(~mqrepeatingjinx_target_~ + i)[;] self.getvar(~mqrepeatingjinx_self_~ + i)[;] self.getvar(~mqrepeatingjinx_turns_~ + i)[;] self.getvar(~mqrepeatingjinx_value_~ + i)); for (eq in self.equipment) eq.scriptaftercombat += ~ var vars = [\~current_index\~[;] \~next_index\~[;] \~title\~[;] \~details_status\~[;] \~details\~[;] \~script\~[;] \~target\~[;] \~self\~[;] \~turns\~[;] \~value\~]; for (_var in vars) self.setvar(\~mqrepeatingjinx_\~ + _var + \~_\~ + ~ + i + ~[;] 0);~;
mqelementalresistancefix,Internal script. Makes elemental strengths and weaknesses cancel each other out; applies strength/weakness display statuses and removes them; removes duplicate elemental resistance innates,var elements = [~fire~[;] ~ice~[;] ~shock~[;] ~poison~]; var remove_innates = []; for (element in elements) {if (self.innate.indexOf(~weak~ + element) != -1 && self.innate.indexOf(~strong~ + element) != -1) {self.innate.remove(~weak~ + element); removestatusself(~mqweakness~ + element); self.innate.remove(~strong~ + element); removestatusself(~mqstrength~ + element);} if (self.innate.indexOf(~strong~ + element) != -1 && getstatusself(~mqstrength~ + element) <= 0) inflictself(~mqstrength~ + element); if (self.innate.indexOf(~weak~ + element) != -1 && getstatusself(~mqweakness~ + element) <= 0) inflictself(~mqweakness~ + element); var strengths = 0; var weaknesses = 0; if (self.innate.length > 0) for (innate in self.innate) {if (innate == ~strong~ + element) {strengths++; if (strengths > 1) remove_innates.push(innate);} if (innate == ~weak~ + element) {weaknesses++; if (weaknesses > 1) remove_innates.push(innate);}}} if (remove_innates.length > 0) {for (innate in remove_innates) self.innate.remove(innate);}
mqelementalresistancefixboth,Internal script. Executes mqelementalresistancefix for self and target,new elements.Skill(~mqelementalresistancefix~).execute(self[;] self); new elements.Skill(~mqelementalresistancefix~).execute(target[;] target);
mqspecialdiceinit,Internal script for highlighting special dice,if (getstatusself(~mqspecialdice~) <= 0) {inflictself(~mqspecialdice~); var actSpecialDice = new motion.actuators.SimpleActuator(null[;] 1[;] null); actSpecialDice.repeat(-1); var funcSpecialDice = new hscript.Parser().parseString(~if (getstatusself(\~mqspecialdice\~) <= 0 # self.hp <= 0 # target.hp <= 0) actSpecialDice._repeat = 0; if (self.dicepool.length > 0) for (mydice in self.dicepool) if (mydice.available() && (mydice.basevalue < 1 # mydice.basevalue > 6)) {mydice.animate(\~\~); var anim = mydice.animation[mydice.animation.length - 1]; anim.addcommand(\~flash\~[;] null[;] 0.1); anim.addcommand(\~shake\~[;] null[;] 0[;] -4); anim.addcommand(\~textparticle\~[;] \~\~ + mydice.basevalue[;] 16777215);}~); var interp = new hscript.Interp(); interp.variables.set(~self~[;] self); interp.variables.set(~target~[;] target); interp.variables.set(~getstatusself~[;] getstatusself); interp.variables.set(~actSpecialDice~[;] actSpecialDice); actSpecialDice.onRepeat(interp.execute[;] [funcSpecialDice]); actSpecialDice.move();}
mqsnapeq,Internal script for activating equipment for free,function min(n1[;] n2) return n1 < n2 ? n1 : n2; var e = self.getvar(~mqsnapeq~); e.shockedsetting = 0; e.positionshockslots(); var slotsFilled = false; if (e.countdown > 0 && e.slots.indexOf(~COUNTDOWN~) == 0) {e.remainingcountdown = 6; givedice(6); e.assigndice(self.dicepool[self.dicepool.length - 1]);} var newdice = []; var total = e.needstotal > 0 ? e.needstotal : 9999; if (e.slots.length > 0) for (slot in e.slots) {var d = 0; switch (slot) {case ~NORMAL~: d = 6; case ~MIN2~: d = 6; case ~MIN3~: d = 6; case ~MIN4~: d = 6; case ~MIN5~: d = 6; case ~MIN6~: d = 6; case ~MAX6~: d = 6; case ~REQUIRE6~: d = 6; case ~EVEN~: d = 6; case ~DOUBLES~: d = 6; case ~MAX5~: d = 5; case ~ODD~: d = 5; case ~REQUIRE5~: d = 5; case ~RANGE25~: d = 5; case ~RANGE35~: d = 5; case ~RANGE45~: d = 5; case ~MAX4~: d = 4; case ~REQUIRE4~: d = 4; case ~RANGE24~: d = 4; case ~RANGE34~: d = 4; case ~MAX3~: d = 3; case ~REQUIRE3~: d = 3; case ~RANGE23~: d = 3; case ~MAX2~: d = 2; case ~REQUIRE2~: d = 2; case ~MAX1~: d = 1; case ~REQUIRE1~: d = 1;} d = min(d[;] total); total -= d; newdice.push(d);} var c = 0; if (newdice.length > 0) {slotsFilled = true; for (d in newdice) {if (d != 0) {givedice([d]); e.assigndice(self.dicepool[self.dicepool.length - 1][;] c);} c++;}} if (slotsFilled && e.countdown <= 0) e.doequipmentaction(self[;] target[;] (self.isplayer ? 1 : -1)[;] e.assigneddice[;] self.getvar(~mqsnapeq_delay~)); e.animate(~flashandshake~); e.animate(~~); var anim = e.animation[e.animation.length - 1]; anim.addcommand(~textparticle~[;] ~Snap!~[;] 16777215);
mqcustomscript,Internal script for loading custom scripts,var Rules = self.getvar(~Rules~); var scriptData = self.getvar(~mqcustomscript~); var passVariables = scriptData.variables != null && scriptData.variables.length > 0; var loadOnce = scriptData.loadOnce != null && scriptData.loadOnce; var script = ~~; if (!loadOnce # self.getvar(~mqcustomscript_~ + scriptData.file).length == null) {Rules.rulescreen(scriptData.file); script = Rules.rulescreen_text.join(~ ~); self.setvar(~mqcustomscript_~ + scriptData.file[;] script);} else {script = self.getvar(~mqcustomscript_~ + scriptData.file);} if (passVariables) for (variable in scriptData.variables) {self.setvar(~mqcustomscript_variable_~ + variable.name[;] variable.value); script = ~var ~ + variable.name + ~ = self.getvar(\~mqcustomscript_variable_~ + variable.name + ~\~); ~ + script;} var skill = new elements.Skill(~Unlimited~); skill.script = script; skill.execute(self[;] target); Rules.overworldbutton_action = ~~; Rules.rulescreen_text = []; self.setvar(~Rules~[;] 0); self.setvar(~mqcustomscript~[;] 0); if (passVariables) for (variable in scriptData.variables) self.setvar(~mqcustomscript_variable_~ + variable.name[;] 0);
mqloadcsv,Internal script for loading custom CSV files,var Rules = self.getvar(~Rules~); Rules.rulescreen(self.getvar(~mqloadcsv~)); var csvData = Rules.rulescreen_text; var processedData = []; if (csvData.length > 0) {var headers = csvData[0].split(~[;]~); if (headers.length > 0) {for (header in headers) processedData.push({header: header[;] data: []}); var headerLine = csvData.shift(); for (c in 0...headers.length) for (csvLine in csvData) if (csvLine.length > 0 && csvLine != headerLine) {csvLine = csvLine.split(~[;]~); processedData[c].data.push(csvLine[c]);}}} for (processedDataPart in processedData) self.setvar(~mqloadcsv_~ + self.getvar(~mqloadcsv~) + ~_~ + processedDataPart.header[;] processedDataPart.data); self.setvar(~Rules~[;] 0); self.setvar(~mqloadcsv~[;] 0);
mqcursedbite,Internal script for Cursed Bite status effect,var robotSkillcard = null; if (target.getvar(~mqcursedbite_old_equipment~).length == null) {var oldEquipment = []; if (target.equipment.length > 0) for (eq in target.equipment) {oldEquipment.push(eq); if (eq.skillcard.indexOf(~robot_~) != -1) robotSkillcard = eq;} target.setvar(~mqcursedbite_old_equipment~[;] oldEquipment); target.setvar(~mqcursedbite_old_layout~[;] target.layout);} target.layout = target.layout.EQUIPMENT; target.equipment = []; if (robotSkillcard != null) target.equipment.push(robotSkillcard); if (self.equipment.length > 0) for (eq in self.equipment) if (eq.skillcard == ~~ && target.spaceleft() >= eq.size && !eq.temporary_thisturnonly) giveenemyequipment(eq.name + eq.namemodifier[;] false[;] false); if (target.scriptendturn.indexOf(~/*mqcursedbite_script_injected*/~) == -1) {var scriptRevertEquipment = ~/*mqcursedbite_script_injected*/ if (self.getvar(\~mqcursedbite_old_equipment\~).length != null) {self.equipment = self.getvar(\~mqcursedbite_old_equipment\~); self.setvar(\~mqcursedbite_old_equipment\~[;] 0); self.layout = self.getvar(\~mqcursedbite_old_layout\~); self.setvar(\~mqcursedbite_old_layout\~[;] 0);} removestatusself(\~mqcursedbite\~);~; target.scriptendturn += ~ ~ + scriptRevertEquipment; target.scriptaftercombat += ~ ~ + scriptRevertEquipment;}
mqinsanity,Internal script for Insanity status effect,if (target.scriptonstartturn.indexOf(~/*mqinsanity_script_injected*/~) == -1) {target.scriptonstartturn += ~ /*mqinsanity_script_injected*/ if (getstatusself(\~mqinsanity\~) > 0) {var myEquipment = []; if (self.equipment.length > 0) for (eq in self.equipment) if (eq.availablethisturn && eq.ready && eq.skillcard == \~\~) myEquipment.push(eq); shuffle(myEquipment); var insanityEquipment = self.getvar(\~mqinsanity_equipment\~); if (insanityEquipment.length == null) insanityEquipment = []; for (insanityCount in 0...getstatusself(\~mqinsanity\~)) if (myEquipment.length > 0) {var eq = myEquipment.pop(); var eqData = {eq: eq[;] displayname: eq.displayname[;] fulldescription: eq.fulldescription[;] script: eq.script[;] castdirection: eq.castdirection[;] scriptbeforeexecute: eq.scriptbeforeexecute}; insanityEquipment.push(eqData); var vowelsString = \~aeiou\~; var consonantsString = \~bcdfghjklmnpqrstvwxyz\~; var vowels = []; var consonants = []; for (l in 0...vowelsString.length) vowels.push(vowelsString.substr(l[;] 1)); for (l in 0...consonantsString.length) consonants.push(consonantsString.substr(l[;] 1)); eq.displayname = \~\~; for (l in 0...eqData.displayname.length) {var addLetter = rand([rand(vowels)[;] rand(consonants)]); if (l == 0 # eqData.displayname.substr(l - 1[;] 1) == \~ \~) addLetter = rand([rand(vowels)[;] rand(consonants)]).toUpperCase(); if (l > 0 && vowels.indexOf(eqData.displayname.substr(l - 1[;] 1)) != -1) addLetter = rand(chance(90) ? consonants : vowels); if (l > 0 && consonants.indexOf(eqData.displayname.substr(l - 1[;] 1)) != -1) addLetter = rand(chance(30) ? consonants : vowels); if (eqData.displayname.substr(l[;] 1) == \~ \~) addLetter = \~ \~; eq.displayname += addLetter;} eq.fulldescription = \~\~; var baseDescription = eqData.fulldescription; while (baseDescription.indexOf(\~[\~) != -1 && baseDescription.indexOf(\~]\~) != -1) {var tagStart = baseDescription.indexOf(\~[\~); var tagEnd = baseDescription.indexOf(\~]\~); baseDescription = baseDescription.substr(0[;] tagStart) + \~*\~ + baseDescription.substr(tagEnd + 1);} while (baseDescription.indexOf(\~<\~) != -1 && baseDescription.indexOf(\~>\~) != -1) {var tagStart = baseDescription.indexOf(\~<\~); var tagEnd = baseDescription.indexOf(\~>\~); baseDescription = baseDescription.substr(0[;] tagStart) + \~*\~ + baseDescription.substr(tagEnd + 1);} for (l in 0...baseDescription.length) {var addLetter = rand([rand(vowels)[;] rand(consonants)]); if (l == 0 # (baseDescription.substr(l - 1[;] 1) == \~ \~ && chance(20))) addLetter = rand([rand(vowels)[;] rand(consonants)]).toUpperCase(); if (l > 0 && vowels.indexOf(baseDescription.substr(l - 1[;] 1)) != -1) addLetter = rand(chance(90) ? consonants : vowels); if (l > 0 && consonants.indexOf(baseDescription.substr(l - 1[;] 1)) != -1) addLetter = rand(chance(30) ? consonants : vowels); if (baseDescription.substr(l[;] 1) == \~ \~) addLetter = \~ \~; if (baseDescription.substr(l[;] 1) == \~*\~) addLetter = \~*\~; if (baseDescription.substr(l[;] 1) == \~#\~.substr(0[;] 1)) addLetter = \~#\~.substr(0[;] 1); eq.fulldescription += addLetter;} while (eq.fulldescription.indexOf(\~*\~) != -1) eq.fulldescription = new EReg(\~\\\\*\~[;] \~\~).replace(eq.fulldescription[;] rand([\~[\~ + rand([\~sword\~[;] \~fire\~[;] \~ice\~[;] \~shock\~[;] \~poison\~[;] \~weaken\~[;] \~lock\~[;] \~dodge\~[;] \~curse\~[;] \~vanish\~[;] \~reduce\~[;] \~shield\~[;] \~fury\~[;] \~star\~[;] \~blind\~[;] \~red\~[;] \~blue\~[;] \~yellow\~[;] \~gray\~]) + \~]\~[;] \~<\~ + rand([\~d6\~[;] \~double\~[;] \~triple\~[;] \~quadruple\~[;] \~quintuple\~[;] \~sextuple\~]) + \~>\~])); eq.scriptrunner = null; var copyEq = new elements.Equipment(rand(getequipment())); self.setvar(\~mqinsanity_script_\~ + eq.displayname[;] copyEq.script); var switchTargets = chance(50); eq.script = \~if (!simulation) {var skill = new elements.Skill(\\\~Unlimited\\\~); skill.script = \\\~var d = \\\~ + d + \\\~; var e = null; if (self.equipment.length > 0) for (eq in self.equipment) if (eq.displayname == \\\\\\\~\~ + eq.displayname + \~\\\\\\\~) e = eq; if (target.equipment.length > 0) for (eq in target.equipment) if (eq.displayname == \\\\\\\~\~ + eq.displayname + \~\\\\\\\~) e = eq; var actualdice = []; if (e != null) actualdice = e.assigneddice; \\\~ + self.getvar(\\\~mqinsanity_script_\~ + eq.displayname + \~\\\~); skill.execute(\~ + (switchTargets ? \~target[;] self\~ : \~self[;] target\~) + \~);} else bonus(rand([100[;] d * 100]));\~; eq.scriptbeforeexecute = \~delay(1.0);\~; eq.castdirection = copyEq.castdirection * (switchTargets ? -1 : 1); var eqCurseAnimation = new elements.Equipment(eq.name); eqCurseAnimation.x = eq.x; eqCurseAnimation.y = eq.y; eqCurseAnimation.size = eq.size; eqCurseAnimation.width = eq.width; eqCurseAnimation.height = eq.height; eqCurseAnimation.temporary_thisturnonly = true; eqCurseAnimation.ready = false; self.equipment.push(eqCurseAnimation); eqCurseAnimation.animate(\~curse\~); var anim = eqCurseAnimation.animation[eqCurseAnimation.animation.length - 1]; anim.parameter[2] = \~[jinx] Insanity!\~;} self.setvar(\~mqinsanity_equipment\~[;] insanityEquipment); sfx(\~_thinghappens\~);}~; var scriptRevertEquipment = ~var insanityEquipment = self.getvar(\~mqinsanity_equipment\~); if (insanityEquipment.length != null) {if (insanityEquipment.length > 0) for (eqData in insanityEquipment) {var eq = eqData.eq; eq.displayname = eqData.displayname; eq.fulldescription = eqData.fulldescription; eq.scriptrunner = null; eq.script = eqData.script; eq.scriptbeforeexecute = eqData.scriptbeforeexecute; eq.castdirection = eqData.castdirection;} self.setvar(\~mqinsanity_equipment\~[;] 0);}~; target.scriptendturn += ~ ~ + scriptRevertEquipment; target.scriptaftercombat += ~ ~ + scriptRevertEquipment;}
mqencase,Internal script for Encase status effect,if (target.scriptonstartturn.indexOf(~/*mqencase_script_injected*/~) == -1) {target.scriptonstartturn += ~ /*mqencase_script_injected*/ if (getstatusself(\~mqencase\~) > 0 # getstatusself(\~mqencase_all\~) > 0) {var encaseEq = []; if (self.equipment.length > 0) for (eq in self.equipment) if (eq.skillcard == \~\~ && eq.availablenextturn) encaseEq.push(eq); shuffle(encaseEq); encaseEq.sort(function (eq1[;] eq2) return eq1.script.indexOf(\~/*mqencaseattract*/\~) != -1 ? -1 : 1); var popCount = encaseEq.length - getstatusself(\~mqencase\~); if (getstatusself(\~mqencase_all\~) > 0) popCount = 0; if (popCount > 0) for (i in 0...popCount) encaseEq.pop(); if (encaseEq.length > 0) for (eq in encaseEq) {var name = eq.name + eq.namemodifier; var displayname = eq.displayname; var x = eq.x; var y = eq.y; eq.create(\~Rule Crystal@\~ + (eq.size == 1 ? \~small\~ : \~big\~)); eq.resetslots(); eq.skillcard = \~crystalina_locked_\~ + name; eq.displayname = displayname; eq.x = x; eq.y = y; eq.animate(\~\~); eq.animation[eq.animation.length - 1].addcommand(\~textparticle\~[;] \~[mana] Encase!\~[;] 16777215); eq.animate(\~flashandshake\~);} sfx(\~_mana\~);}~; target.scriptaftercombat = ~if (self.equipment.length > 0) for (eq in self.equipment) if (eq.name.indexOf(\~Rule Crystal\~) != -1) eq.create(eq.skillcard.split(\~crystalina_locked_\~)[1][;] eq.upgraded # eq.originallyupgraded);~;}
mqsubzero,Internal script for Subzero status effect,if (target.scriptbeforestartturn.indexOf(~/*mqsubzero_script_injected*/~) == -1) {target.scriptbeforestartturn += ~ /*mqsubzero_script_injected*/ if (getstatusself(\~mqsubzero\~) > 0) {inflictself(\~mqtimeruntilendturn\~); var actSubzero = new motion.actuators.SimpleActuator(null[;] 0[;] null); actSubzero.repeat(-1); var funcSubzero = new hscript.Parser().parseString(\~if (getstatusself(\\\~mqtimeruntilendturn\\\~) <= 0) actSubzero._repeat = 0; var alldice = []; if (self.dicepool.length > 0) for (mydice in self.dicepool) if (mydice.available()) alldice.push(mydice); if (alldice.length > 0) for (mydice in alldice) {if (mydice.animation.length > 0) for (anim in mydice.animation) {if (anim.command[5] == \\\~reducestat\\\~ && anim.command[6] == \\\~unlock\\\~) {for (i in 0...anim.command.length) anim.command[i] = \\\~\\\~; mydice.animate(\\\~\\\~[;] 0); var newanim = mydice.animation[mydice.animation.length - 1]; newanim.currenttime = anim.currenttime; newanim.applytodice(mydice); newanim.addcommand(\\\~soundevent\\\~[;] \\\~_dicefreeze\\\~); newanim.addcommand(\\\~overlaytileonce\\\~[;] \\\~ice\\\~[;] -150[;] -126[;] 0.01[;] 1); newanim.addcommand(\\\~applyvariable\\\~[;] \\\~lock\\\~); newanim.addcommand(\\\~reducestat\\\~[;] \\\~ice\\\~);}}}\~); var interp = new hscript.Interp(); interp.variables.set(\~self\~[;] self); interp.variables.set(\~getstatusself\~[;] getstatusself); interp.variables.set(\~actSubzero\~[;] actSubzero); actSubzero.onRepeat(interp.execute[;] [funcSubzero]); actSubzero.move();}~;}
mqfatigue,Internal script for Fatigue status effect,if (target.scriptbeforestartturn.indexOf(~/*mqfatigue_script_injected*/~) == -1) {target.scriptbeforestartturn += ~ /*mqfatigue_script_injected*/ if (getstatusself(\~mqfatigue\~) > 0) {var weakenData = []; if (self.equipment.length > 0) for (eq in self.equipment) {weakenData.push({eq: eq[;] weakentype: eq.weakentype}); eq.weakentype = \~noeffect\~;} self.setvar(\~mqfatigue\~[;] weakenData);}~; var scriptRevertEquipment = ~if (self.getvar(\~mqfatigue\~).length != null) {for (weakenData in self.getvar(\~mqfatigue\~)) weakenData.eq.weakentype = weakenData.weakentype; self.setvar(\~mqfatigue\~[;] 0);}~; target.scriptendturn += ~ ~ + scriptRevertEquipment; target.scriptaftercombat += ~ ~ + scriptRevertEquipment;}
Guarding Charm,Block [shield]8 damage,sfx(~_shield~); inflictself(SHIELD[;] 8);
